import AltText from '../Components/Forms/AltText'
import AnchorText from '../Components/Forms/AnchorText'
import AriaAttributeForm from '../Components/Forms/AriaAttributeForm'
import AriaRoleForm from '../Components/Forms/AriaRoleForm'
import BlockquoteForm from '../Components/Forms/BlockquoteForm'
import ContrastForm from '../Components/Forms/ContrastForm'
import EmbeddedContentTitleForm from '../Components/Forms/EmbeddedContentTitleForm'
import EmphasisForm from '../Components/Forms/EmphasisForm'
import HeadingEmptyForm from '../Components/Forms/HeadingEmptyForm'
import HeadingStyleForm from '../Components/Forms/HeadingStyleForm'
import InvalidAttributeForm from '../Components/Forms/InvalidAttributeForm'
import KeyboardTabbableForm from '../Components/Forms/KeyboardTabbableForm'
import LabelForm from '../Components/Forms/LabelForm'
import LanguageForm from '../Components/Forms/LanguageForm'
import LinkForm from '../Components/Forms/LinkForm'
import ListForm from '../Components/Forms/ListForm'
import MediaCaptionsForm from '../Components/Forms/MediaCaptionsForm'
import MultiPartForm from '../Components/Forms/MultiPartForm'
import QuoteForm from '../Components/Forms/QuoteForm'
import SelectValidIdForm from '../Components/Forms/SelectValidIdForm'
import SensoryMisuseForm from '../Components/Forms/SensoryMisuseForm'
import TableCaptionForm from '../Components/Forms/TableCaptionForm'
import TableHeadersForm from '../Components/Forms/TableHeadersForm'
import UfixitReviewOnly from '../Components/Forms/UfixitReviewOnly'

// These form names strictly match the translation keys in the language files (e.g. en.json).
export const formNames = {
  ALT_TEXT: 'alt_text',
  ANCHOR_TEXT: 'anchor_text',
  ARIA_ATTRIBUTE: 'aria_attribute',
  ARIA_ROLE: 'aria_role',
  BLOCKQUOTE: 'blockquote',
  CONTRAST: 'contrast',
  EMBEDDED_CONTENT_TITLE: 'embedded_content_title',
  EMPHASIS: 'emphasis',
  HEADING_EMPTY: 'heading_empty',
  HEADING_STYLE: 'heading_style',
  INVALID_ATTRIBUTE: 'invalid_attribute',
  KEYBOARD_TABBABLE: 'keyboard_tabbable',
  LABEL: 'label',
  LABEL_UNIQUE: 'label_unique',
  LANGUAGE: 'language',
  LINK: 'link',
  LIST: 'list',
  MEDIA_CAPTIONS: 'media_captions',
  MULTI_PART: 'multi_part',
  QUOTE: 'quote',
  SELECT_VALID_ID: 'select_valid_id',
  SENSORY_MISUSE: 'sensory_misuse',
  TABLE_CAPTION: 'table_caption',
  TABLE_HEADERS: 'table_headers',

  REVIEW_ONLY: 'review_only',
}

export const disabilityTypes = {
  COGNITIVE: 'cognitive',
  HEARING: 'hearing',
  LANGUAGE: 'language',
  MOTOR: 'motor',
  VISUAL: 'visual',
}

const formTypes = {
  [formNames.ALT_TEXT]: AltText,
  [formNames.ANCHOR_TEXT]: AnchorText,
  [formNames.ARIA_ATTRIBUTE]: AriaAttributeForm,
  [formNames.ARIA_ROLE]: AriaRoleForm,
  [formNames.BLOCKQUOTE]: BlockquoteForm,
  [formNames.CONTRAST]: ContrastForm,
  [formNames.EMBEDDED_CONTENT_TITLE]: EmbeddedContentTitleForm,
  [formNames.EMPHASIS]: EmphasisForm,
  [formNames.HEADING_EMPTY]: HeadingEmptyForm,
  [formNames.HEADING_STYLE]: HeadingStyleForm,
  [formNames.INVALID_ATTRIBUTE]: InvalidAttributeForm,
  [formNames.KEYBOARD_TABBABLE]: KeyboardTabbableForm,
  [formNames.LABEL]: LabelForm,
  [formNames.LABEL_UNIQUE]: LabelForm,
  [formNames.LANGUAGE]: LanguageForm,
  [formNames.LINK]: LinkForm,
  [formNames.LIST]: ListForm,
  [formNames.MEDIA_CAPTIONS]: MediaCaptionsForm,
  [formNames.MULTI_PART]: MultiPartForm,
  [formNames.QUOTE]: QuoteForm,
  [formNames.SELECT_VALID_ID]: SelectValidIdForm,
  [formNames.SENSORY_MISUSE]: SensoryMisuseForm,
  [formNames.TABLE_CAPTION]: TableCaptionForm,
  [formNames.TABLE_HEADERS]: TableHeadersForm,
  
  [formNames.REVIEW_ONLY]: UfixitReviewOnly,
}

// Using the formNames as the only values prevents typos and other errors.
const rulesToFormNameMap = {
  // phpAlly rules
  AnchorMustContainText: formNames.ANCHOR_TEXT,
  AnchorSuspiciousLinkText: formNames.ANCHOR_TEXT,
  BrokenLink: formNames.LINK,
  CssTextHasContrast: formNames.CONTRAST,
  CssTextStyleEmphasize: formNames.EMPHASIS,
  HeadersHaveText: formNames.HEADING_EMPTY,
  ImageAltIsDifferent: formNames.ALT_TEXT,
  ImageAltIsTooLong: formNames.ALT_TEXT,
  ImageAltNotEmptyInAnchor: formNames.ALT_TEXT,
  ImageHasAlt: formNames.ALT_TEXT,
  ImageHasAltDecorative: formNames.ALT_TEXT,
  ParagraphNotUsedAsHeader: formNames.HEADING_STYLE,
  RedirectedLink: formNames.LINK,
  TableDataShouldHaveTableHeader: formNames.TABLE_HEADERS,
  TableHeaderShouldHaveScope: formNames.TABLE_HEADERS,
  ImageAltNotPlaceholder: formNames.ALT_TEXT,
  VideoCaptionsMatchCourseLanguage: formNames.MEDIA_CAPTIONS,
  VideosEmbeddedOrLinkedNeedCaptions: formNames.MEDIA_CAPTIONS,
  VideosHaveAutoGeneratedCaptions: formNames.MEDIA_CAPTIONS,

  // Equal Access Rules
  imagemap_alt_exists: formNames.ALT_TEXT,
  img_ismap_misuse: formNames.ALT_TEXT,
  img_alt_background: formNames.ALT_TEXT,
  img_alt_decorative: formNames.ALT_TEXT,
  img_alt_misuse: formNames.ALT_TEXT,
  img_alt_null: formNames.ALT_TEXT,
  img_alt_redundant: formNames.ALT_TEXT,
  img_alt_valid: formNames.ALT_TEXT,

  a_text_purpose: formNames.ANCHOR_TEXT,
  area_alt_exists: formNames.ANCHOR_TEXT,
  
  // aria_attribute_allowed: formNames.ARIA_ATTRIBUTE,
  // aria_attribute_conflict: formNames.ARIA_ATTRIBUTE,
  // aria_attribute_exists: formNames.ARIA_ATTRIBUTE,
  // aria_attribute_redundant: formNames.ARIA_ATTRIBUTE,
  // aria_attribute_value_valid: formNames.ARIA_ATTRIBUTE,

  aria_role_valid: formNames.ARIA_ROLE,
  aria_role_allowed: formNames.ARIA_ROLE,

  blockquote_cite_exists: formNames.BLOCKQUOTE,

  text_contrast_sufficient: formNames.CONTRAST,
  
  applet_alt_exists: formNames.EMBEDDED_CONTENT_TITLE,
  embed_alt_exists: formNames.EMBEDDED_CONTENT_TITLE,
  frame_title_exists: formNames.EMBEDDED_CONTENT_TITLE,
  media_alt_brief: formNames.EMBEDDED_CONTENT_TITLE,
  media_alt_exists: formNames.EMBEDDED_CONTENT_TITLE,
  object_text_exists: formNames.EMBEDDED_CONTENT_TITLE,

  style_color_misuse: formNames.EMPHASIS,

  heading_content_exists: formNames.HEADING_EMPTY,

  heading_markup_misuse: formNames.HEADING_STYLE,
  text_block_heading: formNames.HEADING_STYLE,

  // dir_attribute_valid: formNames.INVALID_ATTRIBUTE,
  // input_autocomplete_valid: formNames.INVALID_ATTRIBUTE,
  // input_haspopup_conflict: formNames.INVALID_ATTRIBUTE,
  // table_aria_descendants: formNames.INVALID_ATTRIBUTE,
  // table_scope_valid: formNames.INVALID_ATTRIBUTE,

  // aria_activedescendant_tabindex_valid: formNames.KEYBOARD_TABBABLE,
  // element_scrollable_tabbable: formNames.KEYBOARD_TABBABLE,
  // element_tabbable_role_valid: formNames.KEYBOARD_TABBABLE,

  aria_accessiblename_exists: formNames.LABEL,
  aria_application_labelled: formNames.LABEL,
  aria_complementary_labelled: formNames.LABEL,
  aria_region_labelled: formNames.LABEL,

  aria_application_label_unique: formNames.LABEL_UNIQUE,
  aria_article_label_unique: formNames.LABEL_UNIQUE,
  aria_banner_label_unique: formNames.LABEL_UNIQUE,
  aria_complementary_label_unique: formNames.LABEL_UNIQUE,
  aria_contentinfo_label_unique: formNames.LABEL_UNIQUE,
  aria_document_label_unique: formNames.LABEL_UNIQUE,
  aria_form_label_unique: formNames.LABEL_UNIQUE,
  aria_landmark_name_unique: formNames.LABEL_UNIQUE,
  aria_main_label_unique: formNames.LABEL_UNIQUE,
  aria_navigation_label_unique: formNames.LABEL_UNIQUE,
  aria_region_label_unique: formNames.LABEL_UNIQUE,
  aria_search_label_unique: formNames.LABEL_UNIQUE,
  aria_toolbar_label_unique: formNames.LABEL_UNIQUE,

  // element_lang_valid: formNames.LANGUAGE,
  // html_lang_exists: formNames.LANGUAGE,
  // html_lang_valid: formNames.LANGUAGE,

  list_children_valid: formNames.LIST,
  list_markup_review: formNames.LIST,
  list_structure_proper: formNames.LIST,

  caption_track_exists: formNames.MEDIA_CAPTIONS,
  media_audio_transcribed: formNames.MEDIA_CAPTIONS,

  // aria_child_valid: formNames.MULTI_PART,
  // aria_parent_required: formNames.MULTI_PART,
  // figure_label_exists: formNames.MULTI_PART,
  // table_caption_nested: formNames.MULTI_PART,
  
  text_quoted_correctly: formNames.QUOTE,

  // aria_id_unique: formNames.SELECT_VALID_ID,
  // combobox_popup_reference: formNames.SELECT_VALID_ID,
  // error_message_exists: formNames.SELECT_VALID_ID,
  // input_placeholder_label_visible: formNames.SELECT_VALID_ID,
  // label_ref_valid: formNames.SELECT_VALID_ID,
  // table_headers_ref_valid: formNames.SELECT_VALID_ID,

  text_sensory_misuse: formNames.SENSORY_MISUSE,

  table_caption_empty: formNames.TABLE_CAPTION,

  table_headers_exists: formNames.TABLE_HEADERS,
}

/* When a REVIEW_ONLY rule uses the same summary as another rule, add it here.
   The key is the name of the rule, and the value is the en.json translation that should be used. */
export const sharedRuleSummaries = {

}

/* When a REVIEW_ONLY rule uses the same description as another rule, add it here.
   The key is the name of the rule, and the value is the en.json translation that should be used. */
export const sharedRuleDescriptions = {
  aria_banner_single: 'form.label.learn_more',
  aria_contentinfo_single: 'form.label.learn_more',
  page_title_valid: 'rule.desc.page_title_exists'
}

export function formFromIssue(activeIssue) {
  if (activeIssue) {
    const ruleId = activeIssue.scanRuleId
    // Get the form name based on the ruleId
    if (rulesToFormNameMap.hasOwnProperty(ruleId)) {
      const formName = rulesToFormNameMap[ruleId]
      // Get the form component based on the form name
      if (formTypes.hasOwnProperty(formName)) {
        return formTypes[formName]
      }
    }
  }
  return UfixitReviewOnly
}

export function formNameFromRule(ruleId) {
  
  if (rulesToFormNameMap.hasOwnProperty(ruleId)) {
    return rulesToFormNameMap[ruleId]
  }

  // If the ruleId is not found, return a default form name
  return formNames.REVIEW_ONLY
}

export function disabilitiesFromRule(ruleId) {
  let disabilities = []
  if (rulesToFormNameMap.hasOwnProperty(ruleId)) {
    let formName = rulesToFormNameMap[ruleId]
    switch (formName) {
      case formNames.ALT_TEXT:
      case formNames.ARIA_ATTRIBUTE:
      case formNames.ARIA_ROLE:
      case formNames.CONTRAST:
        disabilities = [disabilityTypes.VISUAL]
        break
      case formNames.KEYBOARD_TABBABLE:
        disabilities = [disabilityTypes.MOTOR, disabilityTypes.VISUAL]
        break
      case formNames.ANCHOR_TEXT:
      case formNames.BLOCKQUOTE:
      case formNames.EMBEDDED_CONTENT_TITLE:
      case formNames.EMPHASIS:
      case formNames.HEADING_EMPTY:
      case formNames.HEADING_STYLE:
      case formNames.LABEL:
      case formNames.LABEL_UNIQUE:
      case formNames.LINK:
      case formNames.LIST:
      case formNames.QUOTE:
      case formNames.SELECT_VALID_ID:
      case formNames.TABLE_CAPTION:
      case formNames.TABLE_HEADERS:
        disabilities = [disabilityTypes.COGNITIVE, disabilityTypes.VISUAL]
        break
      case formNames.INVALID_ATTRIBUTE:
        disabilities = [disabilityTypes.COGNITIVE, disabilityTypes.MOTOR, disabilityTypes.VISUAL]
        break
      case formNames.LANGUAGE:
      case formNames.SENSORY_MISUSE:
        disabilities = [disabilityTypes.COGNITIVE, disabilityTypes.LANGUAGE, disabilityTypes.VISUAL]
        break
      case formNames.MEDIA_CAPTIONS:
        disabilities = [disabilityTypes.COGNITIVE, disabilityTypes.HEARING, disabilityTypes.LANGUAGE]
        break
      default:
        disabilities = []
        break
    }
    return disabilities
  } else {
    switch (ruleId) {
      case 'aria_descendant_valid':
        disabilities = [disabilityTypes.COGNITIVE, disabilityTypes.MOTOR, disabilityTypes.VISUAL]
        break
      default:
        disabilities = []
        break
    }
    return disabilities
  }
}