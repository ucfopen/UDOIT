import AltText from '../Components/Forms/AltText'
import AnchorText from '../Components/Forms/AnchorText'
import AriaRoleForm from '../Components/Forms/AriaRoleForm'
import ContrastForm from '../Components/Forms/ContrastForm'
import EmbeddedContentTitleForm from '../Components/Forms/EmbeddedContentTitleForm'
import EmphasisForm from '../Components/Forms/EmphasisForm'
import HeadingEmptyForm from '../Components/Forms/HeadingEmptyForm'
import HeadingStyleForm from '../Components/Forms/HeadingStyleForm'
import LabelForm from '../Components/Forms/LabelForm'
import LinkForm from '../Components/Forms/LinkForm'
import QuoteForm from '../Components/Forms/QuoteForm'
import SensoryMisuseForm from '../Components/Forms/SensoryMisuseForm'
import TableHeaders from '../Components/Forms/TableHeaders'
import Video from '../Components/Forms/Video'

import UfixitReviewOnly from '../Components/Forms/UfixitReviewOnly'

// These form names strictly match the translation keys in the language files (e.g. en.json).
const formNames = {
  ALT_TEXT: 'alt_text',
  ANCHOR_TEXT: 'anchor_text',
  ARIA_ROLE: 'aria_role',
  CONTRAST: 'contrast',
  EMBEDDED_CONTENT_TITLE: 'embedded_content_title',
  EMPHASIS: 'emphasis',
  HEADING_EMPTY: 'heading_empty',
  HEADING_STYLE: 'heading_style',
  LABEL: 'label',
  LABEL_UNIQUE: 'label_unique',
  LINK: 'link',
  QUOTE: 'quote',
  SENSORY_MISUSE: 'sensory_misuse',
  TABLE_HEADERS: 'table_headers',
  VIDEO: 'video',

  REVIEW_ONLY: 'review_only',
}

const formTypes = {
  [formNames.ALT_TEXT]: AltText,
  [formNames.ANCHOR_TEXT]: AnchorText,
  [formNames.ARIA_ROLE]: AriaRoleForm,
  [formNames.CONTRAST]: ContrastForm,
  [formNames.EMBEDDED_CONTENT_TITLE]: EmbeddedContentTitleForm,
  [formNames.EMPHASIS]: EmphasisForm,
  [formNames.HEADING_EMPTY]: HeadingEmptyForm,
  [formNames.HEADING_STYLE]: HeadingStyleForm,
  [formNames.LABEL]: LabelForm,
  [formNames.LABEL_UNIQUE]: LabelForm,
  [formNames.LINK]: LinkForm,
  [formNames.QUOTE]: QuoteForm,
  [formNames.SENSORY_MISUSE]: SensoryMisuseForm,
  [formNames.TABLE_HEADERS]: TableHeaders,
  [formNames.VIDEO]: Video,

  [formNames.REVIEW_ONLY]: UfixitReviewOnly,
}

// Using the formNames as the only values prevents typos and other errors.
const rulesToFormNameMap = {
  // phpAlly rules
  AnchorMustContainText: formNames.ANCHOR_TEXT,
  AnchorSuspiciousLinkText: formNames.ANCHOR_TEXT,
  BrokenLink: formNames.LINK,
  CssTextHasContrast: formNames.CONTRAST,
  CssTextStyleEmphasize: formNames.EMPHASIS,
  HeadersHaveText: formNames.HEADING_EMPTY,
  ImageAltIsDifferent: formNames.ALT_TEXT,
  ImageAltIsTooLong: formNames.ALT_TEXT,
  ImageAltNotEmptyInAnchor: formNames.ALT_TEXT,
  ImageHasAlt: formNames.ALT_TEXT,
  ImageHasAltDecorative: formNames.ALT_TEXT,
  ParagraphNotUsedAsHeader: formNames.HEADING_STYLE,
  RedirectedLink: formNames.LINK,
  TableDataShouldHaveTableHeader: formNames.TABLE_HEADERS,
  TableHeaderShouldHaveScope: formNames.TABLE_HEADERS,
  ImageAltNotPlaceholder: formNames.ALT_TEXT,
  VideoCaptionsMatchCourseLanguage: formNames.VIDEO,
  VideosEmbeddedOrLinkedNeedCaptions: formNames.VIDEO,
  VideosHaveAutoGeneratedCaptions: formNames.VIDEO,

  // Equal Access Rules
  img_alt_background: formNames.ALT_TEXT,
  img_alt_decorative: formNames.ALT_TEXT,
  img_alt_misuse: formNames.ALT_TEXT,
  img_alt_null: formNames.ALT_TEXT,
  img_alt_redundant: formNames.ALT_TEXT,
  img_alt_valid: formNames.ALT_TEXT,

  a_text_purpose: formNames.ANCHOR_TEXT,

  aria_role_valid: formNames.ARIA_ROLE,

  text_contrast_sufficient: formNames.CONTRAST,
  
  object_text_exists: formNames.EMBEDDED_CONTENT_TITLE,
  frame_title_exists: formNames.EMBEDDED_CONTENT_TITLE,
  media_alt_exists: formNames.EMBEDDED_CONTENT_TITLE,

  heading_content_exists: formNames.HEADING_EMPTY,

  text_block_heading: formNames.HEADING_STYLE,

  aria_application_labelled: formNames.LABEL,
  aria_accessiblename_exists: formNames.LABEL,

  aria_application_label_unique: formNames.LABEL_UNIQUE,
  aria_banner_label_unique: formNames.LABEL_UNIQUE,
  aria_landmark_name_unique: formNames.LABEL_UNIQUE,
  aria_article_label_unique: formNames.LABEL_UNIQUE,
  aria_complementary_label_unique: formNames.LABEL_UNIQUE,
  aria_contentinfo_label_unique: formNames.LABEL_UNIQUE,
  aria_document_label_unique: formNames.LABEL_UNIQUE,
  aria_form_label_unique: formNames.LABEL_UNIQUE,
  aria_main_label_unique: formNames.LABEL_UNIQUE,
  aria_navigation_label_unique: formNames.LABEL_UNIQUE,
  aria_region_label_unique: formNames.LABEL_UNIQUE,
  aria_search_label_unique: formNames.LABEL_UNIQUE,
  aria_toolbar_label_unique: formNames.LABEL_UNIQUE,

  // text_quoted_correctly: formNames.QUOTE,

  style_color_misuse: formNames.EMPHASIS,

  // text_sensory_misuse: formNames.SENSORY_MISUSE,

  table_headers_exists: formNames.TABLE_HEADERS,
  table_headers_related: formNames.TABLE_HEADERS,

  // caption_track_exists: formNames.VIDEO,
  // media_audio_transcribed: formNames.VIDEO,
}

export function formFromIssue(activeIssue) {
  if (activeIssue && !activeIssue.sourceHtml.includes("data-type-module")) {
    const ruleId = activeIssue.scanRuleId
    // Get the form name based on the ruleId
    if (rulesToFormNameMap.hasOwnProperty(ruleId)) {
      const formName = rulesToFormNameMap[ruleId]
      // Get the form component based on the form name
      if (formTypes.hasOwnProperty(formName)) {
        return formTypes[formName]
      }
    }
  }
  return UfixitReviewOnly
}

export function formNameFromRule(ruleId) {
  
  if (rulesToFormNameMap.hasOwnProperty(ruleId)) {
    return rulesToFormNameMap[ruleId]
  }

  // If the ruleId is not found, return a default form name
  return formNames.REVIEW_ONLY
}