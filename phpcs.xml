<?xml version="1.0"?>
<ruleset name="UCFCDL">
    <description>The UCFCDL coding standard based.</description>

    <config name="ignore_warnings_on_exit" value="true"/>

    <rule ref="./vendor/escapestudios/symfony2-coding-standard/Symfony/ruleset.xml">
        <exclude name="Symfony.Objects.ObjectInstantiation"/>
        <exclude name="Symfony.Errors.ExceptionMessage"/>
        <exclude name="Symfony.Commenting.ClassComment.Missing"/>
        <exclude name="Symfony.ControlStructure.UnaryOperators"/>
        <exclude name="Symfony.Files.AlphanumericFilename"/>
    </rule>

    <exclude-pattern>*/vendor/*</exclude-pattern>
    <exclude-pattern>*/lib/quail/*</exclude-pattern>
    <exclude-pattern>*/ims-blti/*</exclude-pattern>
    <exclude-pattern>*/templates/*</exclude-pattern>
    <exclude-pattern>public/udoit.xml.php</exclude-pattern>


    <!-- ADD the Symfony standard included via composer here -->

    <!-- Symfony follows the standards defined in the PSR-0, PSR-1 and PSR-2 documents. -->

    <!-- Include the whole PSR-1 standard -->
    <rule ref="PSR1">
        <exclude name="PSR1.Classes.ClassDeclaration" />
    </rule>
    <!-- Include the whole PSR-2 standard -->
    <rule ref="PSR2"/>
    <!--

    See the [documented coding standard](http://symfony.com/doc/current/contributing/code/standards.html)
    -->

    <rule ref="Generic.ControlStructures.InlineControlStructure"/>
    <rule ref="Generic.Formatting.SpaceAfterCast"/>
    <rule ref="Generic.Functions.CallTimePassByReference"/>
    <rule ref="Generic.NamingConventions.UpperCaseConstantName"/>
    <rule ref="Generic.PHP.LowerCaseConstant"/>
    <rule ref="Squiz.Arrays.ArrayBracketSpacing"/>
    <rule ref="Squiz.ControlStructures.ControlSignature"/>
    <rule ref="Squiz.ControlStructures.ForEachLoopDeclaration"/>
    <rule ref="Squiz.ControlStructures.ForLoopDeclaration"/>
    <rule ref="Squiz.ControlStructures.LowercaseDeclaration"/>
    <rule ref="Squiz.PHP.LowercasePHPFunctions"/>
    <rule ref="Squiz.Scope.MemberVarScope"/>
    <rule ref="Squiz.Strings.ConcatenationSpacing">
        <properties>
            <property name="ignoreNewlines" value="true"/>
        </properties>
    </rule>

    <!-- We provide our own subclass of PEAR's ClassComment and FunctionComment sniff, but these will do: -->
    <rule ref="PEAR.Commenting.InlineComment"/>

    <!-- Import Zend coding standard (which in turn imports PEAR) -->
    <rule ref="Zend">
        <!-- but exclude their code analyzer -->
        <exclude name="Zend.Debug.CodeAnalyzer"/>

        <!-- covered by Squiz ControlSignature, which enforces try/catch as well -->
        <exclude name="PEAR.ControlStructures.ControlSignature"/>

        <exclude name="PEAR.Commenting.FunctionComment.SpacingBeforeTags"/>

        <!-- do not check line length -->
        <exclude name="Generic.Files.LineLength"/>

        <!-- covered by Squiz FunctionDeclarationSniff -->
        <exclude name="Generic.Functions.OpeningFunctionBraceBsdAllman.BraceOnSameLine"/>

        <!-- remove the requirement for camel case for now -->
        <!-- <exclude name="Zend.NamingConventions.ValidVariableName"/> -->
    </rule>

    <!-- Don't enforce Zend's private member underscores -->
    <rule ref="Zend.NamingConventions.ValidVariableName.PrivateNoUnderscore">
        <severity>0</severity>
    </rule>

    <!-- Ignore variables that contains numbers -->
    <rule ref="Zend.NamingConventions.ValidVariableName.ContainsNumbers">
        <severity>0</severity>
    </rule>

    <rule ref="Zend.NamingConventions.ValidVariableName">
        <type>warning</type>
    </rule>

    <!-- In practice, Symfony2 spaces multiline function calls differently than Zend -->
    <rule ref="PEAR.Functions.FunctionCallSignature.ContentAfterOpenBracket">
        <severity>0</severity>
    </rule>
    <rule ref="PEAR.Functions.FunctionCallSignature.SpaceAfterCloseBracket">
        <severity>0</severity>
    </rule>
    <rule ref="PEAR.Functions.FunctionCallSignature.CloseBracketLine">
        <severity>0</severity>
    </rule>

    <rule ref="Symfony.Commenting.FunctionComment.MissingParamComment">
        <severity>0</severity>
    </rule>

    <rule ref="Symfony.Commenting.FunctionComment.Missing">
        <type>warning</type>
    </rule>

    <rule ref="Symfony.Commenting.ClassComment.Blacklisted">
        <type>error</type>
    </rule>

    <rule ref="Symfony.Commenting.FunctionComment.MissingReturn">
        <type>error</type>
    </rule>

    <rule ref="Symfony.Commenting.FunctionComment.SpacingBeforeTags">
        <severity>0</severity>
    </rule>

    <rule ref="Symfony.Commenting.ClassComment.SpacingBeforeTags">
        <message>There should always be a description, followed by a blank line, before the tags of a class comment.</message>
    </rule>

    <rule ref="Generic.Arrays.DisallowLongArraySyntax"/>

</ruleset>
