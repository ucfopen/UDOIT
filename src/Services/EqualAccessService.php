<?php

namespace App\Services;

use CidiLabs\PhpAlly\PhpAllyIssue;
use CidiLabs\PhpAlly\PhpAllyReport;

use App\Entity\ContentItem;

use DOMDocument;
use DOMElement;
use DOMXPath;
use Symfony\Component\Console\Output\ConsoleOutput;

/*
    Given a JSON report generated by accessibility-checker,
    parse the JSON for all failed rules (according to Equal Access)
    and put them in a phpAlly report

    TODO:
        - check for phpally-ignore on html snippets and ignore them
        - think about how to migrate old database data to equal access
        - find way to skip rules in aws perhaps(?)
        - check for phpally-ignore in lambda function instead
*/

class EqualAccessService {

    // probably should disable rules in equal access itself, this is temporary hopefully
    private $skipRules = array(
        "a_target_warning",
    );

    public function logToServer(string $message) {
        $options = [
            'http' => [
                'header' => "Content-type: text/html\r\n",
                'method' => 'POST',
                'content' => $message,
            ],   
        ];
        
        $context = stream_context_create($options);
        file_get_contents("http://host.docker.internal:3000/log", false, $context);
    }

    public function xpathToSnippet($domXPath, $xpathQuery) {
        // Query the document and save the results into an array
        // In a perfect world this array should only have one element   

        $printOutput = new ConsoleOutput();
        $xpathResults = $domXPath->query($xpathQuery);
        // $printOutput->writeln("xpathResults found: " . ($xpathResults && $xpathResults->length ? $xpathResults->length : 0) . " node(s)");

        $htmlSnippet = null;

        // TODO: For now, if there are multiple results we're just
        // going to choose the first one
        if ($xpathResults) {
            foreach ($xpathResults as $xpathResult) {
                $htmlSnippet = $xpathResult;
            }
        }

        // If no results are found, return null (meaning nothing was found)
        return $htmlSnippet;
    }

    public function checkforIgnoreClass($htmlSnippet) {
        // Assume no phpAllyIgnore by default
        $phpAllyIgnore = false;

        if ($htmlSnippet) {
            $classes = $htmlSnippet->getAttribute("class");

            if (strlen($classes) > 0 && str_contains($classes, "phpally-ignore")) {
                $phpAllyIgnore = true;
            } 
        }

        return $phpAllyIgnore;
    }

    // Generate a UDOIT-style JSON report from the output of Equal Access
    public function generateReport($json, $document) {
        $printOutput = new ConsoleOutput();
        // $this->logToServer("Generating report in EqualAccessService!");
        $report = new PhpAllyReport();
        $xpath = new DOMXPath($document);

        $issues = array();
        $issueCounts = array();

        // $this->logToServer(json_encode($json["results"]));
        // $printOutput->writeln("results: " . json_encode($json["results"], JSON_PRETTY_PRINT));
        foreach ($json["results"] as $results) {
            $equalAccessRule = $results["ruleId"];

            // $this->logToServer($equalAccessRule);
            $xpathQuery = $results["path"]["dom"];
            $xpathQuery = str_replace('\/', '/', $xpathQuery);
            // $printOutput->writeln("xpathQuery: " . $xpathQuery);
            
            // Log information about the XPath object
            // $printOutput->writeln("XPath object information:");
            // $printOutput->writeln(" - Document encoding: " . $xpath->document->encoding);
            // $printOutput->writeln(" - Document version: " . $xpath->document->xmlVersion);
            // $printOutput->writeln(" - Document has root element: " . ($xpath->document->documentElement !== null ? 'yes' : 'no'));
            
            $nodes = $xpath->query($xpathQuery);
            // $printOutput->writeln("Number of nodes found: " . ($nodes ? $nodes->length : 0));
            foreach ($nodes as $node) {
                // $printOutput->writeln("node: " . $node->nodeValue);
            }
            // $this->logToServer($xpathQuery);
            $issueHtml = $this->xpathToSnippet($xpath, $xpathQuery);
            $metadata = null;
            // $printOutput->writeln("checkForIgnoreClass: " . $this->checkForIgnoreClass($issueHtml));
            // $printOutput->writeln("in array: " . in_array($equalAccessRule, $this->skipRules));

            // First check if the HTML has phpally-ignore and also check if the rule isn't one we skip.
            if (!$this->checkForIgnoreClass($issueHtml) && !in_array($equalAccessRule, $this->skipRules)) {
                // Populate the issue counts field with how many total issues
                // with the specific rule are found
                if (array_key_exists($equalAccessRule, $issueCounts)) {
                    $issueCounts[$equalAccessRule]++;
                }
                else {
                    $issueCounts[$equalAccessRule] = 1;
                }

                // Check for specific rules (mostly about contrast)
                // so we can add CSS metadata to database
                // TODO: check if these elements exist? 
                // equal access may just always have these available for each rule however
                $reasonId = $results["reasonId"];
                $message = $results["message"];
                $messageArgs = $results["messageArgs"];

                $metadata = $this->createMetadata($reasonId, $message, $messageArgs);

                // Check for null (aka no XPath result was found) and skip.
                // Otherwise, create a new issue with the HTML from the XPath query.
                // $printOutput->writeln("issueHtml: " . json_encode($issueHtml, JSON_PRETTY_PRINT));
                if ($issueHtml) {
                    // UDOIT database has 'html' and 'preview_html',
                    // where 'preview_html' is the parent of the offending html
                    $parentIssueHtml = $issueHtml->parentNode;
                }  
                else {
                    continue;
                }
                
                $issue = new PhpAllyIssue($equalAccessRule, $issueHtml, $parentIssueHtml, $metadata);
                $report->setIssueCounts($equalAccessRule, $issueCounts[$equalAccessRule], -1);
                array_push($issues, $issue);
                $report->setErrors([]);
            }
        }

        $report->setIssues($issues);

        // Debug
        // $this->logToServer("REPORT:");
        // $this->logToServer(json_encode($report, JSON_PRETTY_PRINT));

        return $report;
    }

    public function createMetadata($reasonId, $message, $messageArgs) {
        // The Equal Access report has a few sections which describe
        // what the error is/what type of error/error arguments, which we can use 
        // on UFIXIT to display messages

        $metadata = array(
            "reasonId" => $reasonId,
            "message" => $message,
            "messageArgs" => $messageArgs,
        );

        return json_encode($metadata);
    }

    public function getDomDocument($html)
    {
        // Load the HTML string into a DOMDocument that PHP can parse.
        // TODO: checks for if <html>, <body>, or <head> and <style> exist? technically canvas will always remove them if they are present in the HTML editor
        // but you never know, also the loadHTML string is pretty long and kinda unreadable, could individually load in each element maybe
        $dom = new DOMDocument('1.0', 'utf-8');
        libxml_use_internal_errors(true); // this might not be the best idea, we use this to stop udoit from crashing when it sees an html5 element

        // Set the default background color and text color in the DOMDocument's <style>
        $envBackgroundColor = $_ENV['BACKGROUND_COLOR'];
        $envTextColor = $_ENV['TEXT_COLOR'];

        if (strpos($html, '<?xml encoding="utf-8"') !== false) {
            $dom->loadHTML("<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><title>Placeholder Page Title</title></head><body><div role=\"main\"><h1>Placeholder Page Title</h1>{$html}</div></body></html>", LIBXML_HTML_NOIMPLIED | LIBXML_HTML_NODEFDTD);

        } else {
            $dom->loadHTML("<?xml encoding=\"utf-8\" ?><!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><title>Placeholder Page Title</title></head><body><div role=\"main\"><h1>Placeholder Page Title</h1>{$html}</div></body></html>", LIBXML_HTML_NOIMPLIED | LIBXML_HTML_NODEFDTD);
        }

        return $dom;

    }
}
