<?php

namespace App\Services;

use CidiLabs\PhpAlly\PhpAllyIssue;
use CidiLabs\PhpAlly\PhpAllyReport;

use App\Entity\Issue;
use App\Entity\ContentItem;

use DOMDocument;
use DOMElement;
use DOMXPath;

/*
    Given a JSON report generated by accessibility-checker,
    parse the JSON for all failed rules (according to Equal Access)
    and put them in a phpAlly report

    TODO:
        - check for phpally-ignore on html snippets and ignore them
        - think about how to migrate old database data to equal access
        - find way to skip rules in aws perhaps(?)
        - check for phpally-ignore in lambda function instead
*/

class EqualAccessService {

    // probably should disable rules in equal access itself, this is temporary hopefully
    private $skipRules = array(
        "html_lang_exists",
        "html_skipnav_exists",
        "page_title_exists",
        "skip_main_exists",
        "style_highcontrast_visible",
        "style_viewport_resizable",
        "aria_accessiblename_exists",
        "aria_content_in_landmark",
        "aria_landmark_name_unique",
        "a_target_warning",
        "text_quoted_correctly",
    );

    public function logToServer(string $message) {
        $options = [
            'http' => [
                'header' => "Content-type: text/html\r\n",
                'method' => 'POST',
                'content' => $message,
            ],
        ];

        $context = stream_context_create($options);
        file_get_contents("http://host.docker.internal:3000/log", false, $context);
    }

    public function xpathToSnippet($domXPath, $xpathQuery) {
        // Query the document and save the results into an array
        // In a perfect world this array should only have one element

        $xpathResults = $domXPath->query($xpathQuery);
        $htmlSnippet = null;

        // TODO: For now, if there are multiple results we're just
        // going to choose the first one
        if ($xpathResults) {
            foreach ($xpathResults as $xpathResult) {
                $htmlSnippet = $xpathResult;
            }
        }

        // If no results are found, return null (meaning nothing was found)
        return $htmlSnippet;
    }

    public function checkforIgnoreClass($htmlSnippet, $equalAccessRule) {

        $errorIsReviewed = false;

        if ($htmlSnippet) {
            $classes = $htmlSnippet->getAttribute("class");

            if (strlen($classes) > 0) {
              $specificRule = "udoit-ignore-" . str_replace("_", "-", $equalAccessRule);
               if(str_contains($classes, "phpally-ignore") || str_contains($classes, $specificRule)) {
                // If the class phpally-ignore OR udoit-ignore-{ruleId} is found, ignore this issue
                $errorIsReviewed = true;
               }
            }
        }

        return $errorIsReviewed;
    }

    // Generate a UDOIT-style JSON report from the output of Equal Access
    public function generateReport($json) {

        $report = new PhpAllyReport();
        // $xpath = new DOMXPath($document);

        $issues = array();
        $issueCounts = array();

        foreach ($json["results"] as $results) {
            $equalAccessRule = $results["ruleId"];

            // $this->logToServer($equalAccessRule);
            $xpathQuery = $results["path"]["dom"];
            // $this->logToServer($xpathQuery);
            // $issueHtml = $this->xpathToSnippet($xpath, $xpathQuery);
            $metadata = null;

            // First check if the HTML has phpally-ignore and also check if the rule isn't one we skip.
            if (!in_array($equalAccessRule, $this->skipRules)) {
                // Populate the issue counts field with how many total issues
                // with the specific rule are found
                if (array_key_exists($equalAccessRule, $issueCounts)) {
                    $issueCounts[$equalAccessRule]++;
                }
                else {
                    $issueCounts[$equalAccessRule] = 1;
                }

                $reasonId = $results["reasonId"];
                $message = $results["message"];
                $messageArgs = $results["messageArgs"];
                $value = $results["value"];

                $metadata = $this->createMetadata($reasonId, $message, $messageArgs, $value);

                // $issue = new PhpAllyIssue($equalAccessRule, $issueHtml, $parentIssueHtml, $metadata);
                $issue = (object) [
                  'isGeneric' => true,
                  'scanRuleId' => $equalAccessRule,
                  'xpath' => $xpathQuery,
                  'metadata' => $metadata,
                ];
                $report->setIssueCounts($equalAccessRule, $issueCounts[$equalAccessRule], -1);
                array_push($issues, $issue);
                $report->setErrors([]);
            }
        }

        $report->setIssues($issues);

        // Debug
        // $this->logToServer("REPORT:");
        // $this->logToServer(json_encode($report, JSON_PRETTY_PRINT));

        return $report;
    }

    public function createMetadata($reasonId, $message, $messageArgs, $value) {
        // The Equal Access report has a few sections which describe
        // what the error is/what type of error/error arguments, which we can use
        // on UFIXIT to display messages

        $metadata = array(
            "reasonId" => $reasonId,
            "message" => $message,
            "messageArgs" => $messageArgs,
            "value" => $value,
        );

        return json_encode($metadata);
    }

    public function getIssueType($metadata) {
      // if we're using equal access, use the "value" types (usually an array like ["VIOLATION", "FAIL"])
      // to set the issue type (e.g. "error" or "suggestion")
      $metadata = json_decode($metadata, true);
      $value = $metadata["value"];

      if (is_array($value)) {
        /* equal access has the following: violation, potentialviolation, recommendation, potentialrecommendation, manual
        violation, potentialviolation -> issue, potential issue
        recommendation, potentialrecommendation -> suggestion
        manual -> potential issue
        */
        if (in_array("PASS", $value)) {
          return "pass";
        }
        else if (in_array("MANUAL", $value)) {
          // potentialviolation
          // manual is a special case, it means that the rule requires manual review
          return "potential";
        }
        else if (in_array("VIOLATION", $value)) {
          if (in_array("FAIL", $value)) {
            // violation
            return "error";
          }
          else {
            // potentialviolation
            return "potential";
          }
        }
        else if (in_array("RECOMMENDATION", $value)) {
          // recommendation/potentialrecommendation
          return "suggestion";
        }
      }

      return "error";
    }

    public function getDomDocument($html)
    {
        // Load the HTML string into a DOMDocument that PHP can parse.
        // TODO: checks for if <html>, <body>, or <head> and <style> exist? technically canvas will always remove them if they are present in the HTML editor
        // but you never know, also the loadHTML string is pretty long and kinda unreadable, could individually load in each element maybe
        $dom = new DOMDocument('1.0', 'utf-8');
        libxml_use_internal_errors(true); // this might not be the best idea, we use this to stop udoit from crashing when it sees an html5 element

        // Set the default background color and text color in the DOMDocument's <style>
        $envBackgroundColor = $_ENV['BACKGROUND_COLOR'];
        $envTextColor = $_ENV['TEXT_COLOR'];

        if (strpos($html, '<?xml encoding="utf-8"') !== false) {
            $dom->loadHTML("<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><title>Placeholder Page Title</title></head><body><main>{$html}</main></body></html>", LIBXML_HTML_NOIMPLIED | LIBXML_HTML_NODEFDTD);

        } else {
            $dom->loadHTML("<?xml encoding=\"utf-8\" ?><!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><title>Placeholder Page Title</title></head><body><main>{$html}</main></body></html>", LIBXML_HTML_NOIMPLIED | LIBXML_HTML_NODEFDTD);
        }

        return $dom;

    }
}
